# -*- coding: utf-8 -*-
"""
/***************************************************************************
 routeEditorDockWidget
                                 A QGIS plugin
 Edits and fits data to routes
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2022-05-04
        git sha              : $Format:%H$
        copyright            : (C) 2022 by drew
        email                : drew.bennett@ptsinternational.co.uk
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from PyQt5.QtGui import QKeySequence
from PyQt5.QtWidgets import QMenuBar

from qgis.PyQt import QtWidgets, uic
from qgis.PyQt.QtCore import pyqtSignal

from route_editor.models.routes import routes_model
from route_editor.widgets import fields_dialog

from route_editor.models.get_db import getDb



FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'route_editor_dockwidget_base.ui'))





class routeEditorDockWidget(QtWidgets.QDockWidget, FORM_CLASS):

    closingPlugin = pyqtSignal()

    def __init__(self, parent=None):
        super(routeEditorDockWidget, self).__init__(parent)
       
        self.setupUi(self)
        self.layersDialog = fields_dialog.fieldsDialog(parent=self)
        self.initTopMenu()
        self.setDb()     
        self.runBox.setModel(self.layersDialog.runsModel)
        self.runBox.currentIndexChanged.connect(self.runSet)
        self.runSet()
        self.filterButton.clicked.connect(self.filterLayer)
        
        
        
    def filterLayer(self):
        if isinstance(self.mainView.model(),routes_model.routesModel):
            self.mainView.model().filterLayer()
        
        
    def runSet(self):
        self.mainView.model().setRun(self.runBox.currentText())
        
        
        
    def setDb(self):
        db = getDb()
        m = routes_model.routesModel(db=db,parent=self)
        m.setFields(self.layersDialog)
        m.select()
        self.mainView.setModel(m)



    def initTopMenu(self):
        topMenu = QMenuBar()       

        #file
        fileMenu = topMenu.addMenu("File")
        saveAct = fileMenu.addAction('Save as...')
        saveAct.triggered.connect(self.save)

        openAct = fileMenu.addAction('Open...')
        openAct.triggered.connect(self.load)
        
        #insert
        insertMenu = topMenu.addMenu("Insert")

        insertFeatureAct = insertMenu.addAction('Insert Selected Feature')
        insertFeatureAct.setShortcut(QKeySequence('Alt+1'))#focus policy of dockwidget probably important here
        insertFeatureAct.setToolTip('Insert selected feature of layer')
        insertFeatureAct.triggered.connect(self.insertFeature)


        insertDummyAct = insertMenu.addAction('Insert Dummy')
        insertDummyAct.setShortcut(QKeySequence('Alt+2'))#focus policy of dockwidget probably important here
        insertDummyAct.triggered.connect(self.insertDummy)
        insertDummyAct.setToolTip('Insert dummy at row')


        insertFileAct = insertMenu.addAction('Insert File')
        insertFileAct.triggered.connect(self.insertFile)
        insertFileAct.setToolTip('Insert file...')


        setupMenu = topMenu.addMenu("Setup")
        setLayersAct = setupMenu.addAction('Set layers and fields')
        setLayersAct.setToolTip('Set layers and fields to be used by plugin')
        setLayersAct.triggered.connect(self.layersDialog.show)


        fitMenu = topMenu.addMenu("Fitting")
        refitAct = fitMenu.addAction('Fit readings')
        refitAct.setToolTip('Create new layer with fitted readings')
        refitAct.triggered.connect(self.refit)
        fitMenu.setToolTipsVisible(True)

        #help
        helpMenu = topMenu.addMenu('Help')  
        openHelpAct = helpMenu.addAction('Open help (in your default web browser)')
        openHelpAct.triggered.connect(self.openHelp)

        self.mainWidget.layout().setMenuBar(topMenu)
        
        

    def closeEvent(self, event):
        self.closingPlugin.emit()
        event.accept()



    def getInsertRow(self):
        return self.rowBox.value()


    def load(self):
        pass
    
    
    def refit(self):
        if isinstance(self.mainView.model(),routes_model.routesModel):
            self.mainView.model().refit()
        
    
    def save(self):
        pass
    
    
    def insertDummy(self):
        if isinstance(self.mainView.model(),routes_model.routesModel):
            self.mainView.model().insertDummy(row=self.getInsertRow())

    
    def insertFile(self):
        pass
    
    
    def insertFeature(self):
        if isinstance(self.mainView.model(),routes_model.routesModel):
            self.mainView.model().insertSelected()
    
    
    def openHelp(self):
        pass
    
